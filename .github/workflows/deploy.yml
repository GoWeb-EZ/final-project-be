name: Java CI with Gradle

# 동작 조건 설정 : main 브랜치에 push 혹은 pull request가 발생할 경우 동작한다.
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  # Spring Boot 애플리케이션을 빌드하여 도커허브에 푸시하는 과정
  build-docker-image:
    runs-on: ubuntu-latest

    env:
      MONGODB_URI: ${{ secrets.MONGODB_URI }}
      JWT_SECRET_STRING: ${{ secrets.JWT_SECRET_STRING }}
      KAKAO_CLIENT_KEY: ${{ secrets.KAKAO_CLIENT_KEY }}
      KAKAO_CLIENT_SECRET: ${{ secrets.KAKAO_CLIENT_SECRET }}
      HOST_ADDRESS: ${{ secrets.EC2_HOST }}
      KAKAO_WORK_BOT_KEY: ${{ secrets.KAKAO_WORK_BOT_KEY }}
      KAKAO_WORK_ROOM_ID: ${{ secrets.KAKAO_WORK_ROOM_ID }}
      FILE_DIR: ${{ secrets.FILE_DIR }}

    steps:
      - uses: actions/checkout@v3
      # 1. Java 17 세팅
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 2. Spring Boot 애플리케이션 빌드
      - name: Build with Gradle
        uses: gradle/gradle-build-action@v3
        with:
          arguments: build
          gradle-home-cache-cleanup: true

      # 3. Docker 이미지 빌드
      - name: docker image build
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/goweb-final-be .

      # 4. DockerHub 로그인
      - name: docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # 5. Docker Hub 이미지 푸시
      - name: docker Hub push
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/goweb-final-be

  run-docker-image-on-ec2:
    # build-docker-image (위)과정이 완료되어야 실행됩니다.
    needs: build-docker-image
    runs-on: ubuntu-latest

    steps:

      - name: SSH into Ubuntu server and pull the latest image
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            sudo docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/goweb-final-be:latest
            sudo docker stop goweb-final-be || true
            sudo docker run -e MONGODB_URI="${{ secrets.MONGODB_URI }}" -e JWT_SECRET_STRING="${{ secrets.JWT_SECRET_STRING }}" -e KAKAO_CLIENT_KEY="${{ secrets.KAKAO_CLIENT_KEY }}" -e KAKAO_CLIENT_SECRET="${{ secrets.KAKAO_CLIENT_SECRET }}" -e HOST_ADDRESS="${{ secrets.EC2_HOST }}" -e KAKAO_WORK_BOT_KEY="${{ secrets.KAKAO_WORK_BOT_KEY }}" -e KAKAO_WORK_ROOM_ID="${{ secrets.KAKAO_WORK_ROOM_ID }}" -e FILE_DIR="${{ secrets.FILE_DIR }}" -v /images:/usr/src/app/images --name goweb-final-be --rm -d -p 8080:8080 ${{ secrets.DOCKERHUB_USERNAME }}/goweb-final-be
            sudo docker system prune -f
#      #1. 최신 이미지를 풀받습니다
#        sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/github-actions-demo
#
#      # 2. 기존의 컨테이너를 중지시킵니다
#      - name: docker stop container
#        run: sudo docker stop $(sudo docker ps -q) 2>/dev/null || true
#
#      # 3. 최신 이미지를 컨테이너화하여 실행시킵니다
#      - name: docker run new container
#        run: sudo docker run --name github-actions-demo --rm -d -p 8080:8080 ${{ secrets.DOCKERHUB_USERNAME }}/github-actions-demo
#
#      # 4. 미사용 이미지를 정리합니다
#      - name: delete old docker image
#        run: sudo docker system prune -f